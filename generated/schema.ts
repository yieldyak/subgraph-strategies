// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  TypedMap,
  Entity,
  Value,
  ValueKind,
  store,
  Bytes,
  BigInt,
  BigDecimal,
} from "@graphprotocol/graph-ts";

export class UserStrategy extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save UserStrategy entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type UserStrategy must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("UserStrategy", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): UserStrategy | null {
    return changetype<UserStrategy | null>(
      store.get_in_block("UserStrategy", id.toHexString()),
    );
  }

  static load(id: Bytes): UserStrategy | null {
    return changetype<UserStrategy | null>(
      store.get("UserStrategy", id.toHexString()),
    );
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get strategy(): Bytes {
    let value = this.get("strategy");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set strategy(value: Bytes) {
    this.set("strategy", Value.fromBytes(value));
  }

  get netDeposits(): BigInt {
    let value = this.get("netDeposits");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set netDeposits(value: BigInt) {
    this.set("netDeposits", Value.fromBigInt(value));
  }

  get yrtBalance(): BigInt {
    let value = this.get("yrtBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set yrtBalance(value: BigInt) {
    this.set("yrtBalance", Value.fromBigInt(value));
  }

  get cumulativeDepositsOrTransfersIn(): BigInt {
    let value = this.get("cumulativeDepositsOrTransfersIn");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set cumulativeDepositsOrTransfersIn(value: BigInt) {
    this.set("cumulativeDepositsOrTransfersIn", Value.fromBigInt(value));
  }

  get depositCount(): BigInt {
    let value = this.get("depositCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set depositCount(value: BigInt) {
    this.set("depositCount", Value.fromBigInt(value));
  }

  get transferInCount(): BigInt {
    let value = this.get("transferInCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set transferInCount(value: BigInt) {
    this.set("transferInCount", Value.fromBigInt(value));
  }

  get cumulativeWithdrawsOrTransfersOut(): BigInt {
    let value = this.get("cumulativeWithdrawsOrTransfersOut");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set cumulativeWithdrawsOrTransfersOut(value: BigInt) {
    this.set("cumulativeWithdrawsOrTransfersOut", Value.fromBigInt(value));
  }

  get withdrawCount(): BigInt {
    let value = this.get("withdrawCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set withdrawCount(value: BigInt) {
    this.set("withdrawCount", Value.fromBigInt(value));
  }

  get transferOutCount(): BigInt {
    let value = this.get("transferOutCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set transferOutCount(value: BigInt) {
    this.set("transferOutCount", Value.fromBigInt(value));
  }

  get reinvestCount(): BigInt {
    let value = this.get("reinvestCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set reinvestCount(value: BigInt) {
    this.set("reinvestCount", Value.fromBigInt(value));
  }

  get cumulativeTransferAmountToReinvestAddr(): BigInt {
    let value = this.get("cumulativeTransferAmountToReinvestAddr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set cumulativeTransferAmountToReinvestAddr(value: BigInt) {
    this.set("cumulativeTransferAmountToReinvestAddr", Value.fromBigInt(value));
  }

  get cumulativeReinvestGasCost(): BigInt {
    let value = this.get("cumulativeReinvestGasCost");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set cumulativeReinvestGasCost(value: BigInt) {
    this.set("cumulativeReinvestGasCost", Value.fromBigInt(value));
  }

  get deposits(): DepositLoader {
    return new DepositLoader(
      "UserStrategy",
      this.get("id")!.toBytes().toHexString(),
      "deposits",
    );
  }

  get withdraws(): WithdrawLoader {
    return new WithdrawLoader(
      "UserStrategy",
      this.get("id")!.toBytes().toHexString(),
      "withdraws",
    );
  }

  get transfersIn(): TransferLoader {
    return new TransferLoader(
      "UserStrategy",
      this.get("id")!.toBytes().toHexString(),
      "transfersIn",
    );
  }

  get transfersOut(): TransferLoader {
    return new TransferLoader(
      "UserStrategy",
      this.get("id")!.toBytes().toHexString(),
      "transfersOut",
    );
  }

  get reinvests(): ReinvestLoader {
    return new ReinvestLoader(
      "UserStrategy",
      this.get("id")!.toBytes().toHexString(),
      "reinvests",
    );
  }

  get allEvents(): DataLoader {
    return new DataLoader(
      "UserStrategy",
      this.get("id")!.toBytes().toHexString(),
      "allEvents",
    );
  }

  get stats(): UserStrategyStatLoader {
    return new UserStrategyStatLoader(
      "UserStrategy",
      this.get("id")!.toBytes().toHexString(),
      "stats",
    );
  }
}

export class User extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save User entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type User must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("User", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): User | null {
    return changetype<User | null>(
      store.get_in_block("User", id.toHexString()),
    );
  }

  static load(id: Bytes): User | null {
    return changetype<User | null>(store.get("User", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get depositCount(): BigInt {
    let value = this.get("depositCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set depositCount(value: BigInt) {
    this.set("depositCount", Value.fromBigInt(value));
  }

  get withdrawCount(): BigInt {
    let value = this.get("withdrawCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set withdrawCount(value: BigInt) {
    this.set("withdrawCount", Value.fromBigInt(value));
  }

  get transferInCount(): BigInt {
    let value = this.get("transferInCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set transferInCount(value: BigInt) {
    this.set("transferInCount", Value.fromBigInt(value));
  }

  get transferOutCount(): BigInt {
    let value = this.get("transferOutCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set transferOutCount(value: BigInt) {
    this.set("transferOutCount", Value.fromBigInt(value));
  }

  get reinvestCount(): BigInt {
    let value = this.get("reinvestCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set reinvestCount(value: BigInt) {
    this.set("reinvestCount", Value.fromBigInt(value));
  }

  get strategies(): UserStrategyLoader {
    return new UserStrategyLoader(
      "User",
      this.get("id")!.toBytes().toHexString(),
      "strategies",
    );
  }

  get deposits(): DepositLoader {
    return new DepositLoader(
      "User",
      this.get("id")!.toBytes().toHexString(),
      "deposits",
    );
  }

  get withdraws(): WithdrawLoader {
    return new WithdrawLoader(
      "User",
      this.get("id")!.toBytes().toHexString(),
      "withdraws",
    );
  }

  get transfersIn(): TransferLoader {
    return new TransferLoader(
      "User",
      this.get("id")!.toBytes().toHexString(),
      "transfersIn",
    );
  }

  get transfersOut(): TransferLoader {
    return new TransferLoader(
      "User",
      this.get("id")!.toBytes().toHexString(),
      "transfersOut",
    );
  }

  get reinvests(): ReinvestLoader {
    return new ReinvestLoader(
      "User",
      this.get("id")!.toBytes().toHexString(),
      "reinvests",
    );
  }

  get allEvents(): DataLoader {
    return new DataLoader(
      "User",
      this.get("id")!.toBytes().toHexString(),
      "allEvents",
    );
  }
}

export class Strategy extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Strategy entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Strategy must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Strategy", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Strategy | null {
    return changetype<Strategy | null>(
      store.get_in_block("Strategy", id.toHexString()),
    );
  }

  static load(id: Bytes): Strategy | null {
    return changetype<Strategy | null>(store.get("Strategy", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get name(): string {
    let value = this.get("name");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set name(value: string) {
    this.set("name", Value.fromString(value));
  }

  get depositToken(): Bytes {
    let value = this.get("depositToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set depositToken(value: Bytes) {
    this.set("depositToken", Value.fromBytes(value));
  }

  get rewardToken(): Bytes {
    let value = this.get("rewardToken");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set rewardToken(value: Bytes) {
    this.set("rewardToken", Value.fromBytes(value));
  }

  get devAddr(): Bytes {
    let value = this.get("devAddr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set devAddr(value: Bytes) {
    this.set("devAddr", Value.fromBytes(value));
  }

  get feeCollector(): Bytes {
    let value = this.get("feeCollector");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set feeCollector(value: Bytes) {
    this.set("feeCollector", Value.fromBytes(value));
  }

  get adminFee(): BigInt {
    let value = this.get("adminFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set adminFee(value: BigInt) {
    this.set("adminFee", Value.fromBigInt(value));
  }

  get devFee(): BigInt {
    let value = this.get("devFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set devFee(value: BigInt) {
    this.set("devFee", Value.fromBigInt(value));
  }

  get reinvestFee(): BigInt {
    let value = this.get("reinvestFee");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set reinvestFee(value: BigInt) {
    this.set("reinvestFee", Value.fromBigInt(value));
  }

  get depositsEnabled(): boolean {
    let value = this.get("depositsEnabled");
    if (!value || value.kind == ValueKind.NULL) {
      return false;
    } else {
      return value.toBoolean();
    }
  }

  set depositsEnabled(value: boolean) {
    this.set("depositsEnabled", Value.fromBoolean(value));
  }

  get depositTokenBalance(): BigInt {
    let value = this.get("depositTokenBalance");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set depositTokenBalance(value: BigInt) {
    this.set("depositTokenBalance", Value.fromBigInt(value));
  }

  get totalSupply(): BigInt {
    let value = this.get("totalSupply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set totalSupply(value: BigInt) {
    this.set("totalSupply", Value.fromBigInt(value));
  }

  get cumulativeDeposits(): BigInt {
    let value = this.get("cumulativeDeposits");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set cumulativeDeposits(value: BigInt) {
    this.set("cumulativeDeposits", Value.fromBigInt(value));
  }

  get depositCount(): BigInt {
    let value = this.get("depositCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set depositCount(value: BigInt) {
    this.set("depositCount", Value.fromBigInt(value));
  }

  get cumulativeWithdraws(): BigInt {
    let value = this.get("cumulativeWithdraws");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set cumulativeWithdraws(value: BigInt) {
    this.set("cumulativeWithdraws", Value.fromBigInt(value));
  }

  get withdrawCount(): BigInt {
    let value = this.get("withdrawCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set withdrawCount(value: BigInt) {
    this.set("withdrawCount", Value.fromBigInt(value));
  }

  get cumulativeNetDeposits(): BigInt {
    let value = this.get("cumulativeNetDeposits");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set cumulativeNetDeposits(value: BigInt) {
    this.set("cumulativeNetDeposits", Value.fromBigInt(value));
  }

  get transferCount(): BigInt {
    let value = this.get("transferCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set transferCount(value: BigInt) {
    this.set("transferCount", Value.fromBigInt(value));
  }

  get reinvestCount(): BigInt {
    let value = this.get("reinvestCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set reinvestCount(value: BigInt) {
    this.set("reinvestCount", Value.fromBigInt(value));
  }

  get cumulativeTransferAmountToDevAddrOrFeeCollector(): BigInt {
    let value = this.get("cumulativeTransferAmountToDevAddrOrFeeCollector");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set cumulativeTransferAmountToDevAddrOrFeeCollector(value: BigInt) {
    this.set(
      "cumulativeTransferAmountToDevAddrOrFeeCollector",
      Value.fromBigInt(value),
    );
  }

  get cumulativeTransferAmountToReinvestAddr(): BigInt {
    let value = this.get("cumulativeTransferAmountToReinvestAddr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set cumulativeTransferAmountToReinvestAddr(value: BigInt) {
    this.set("cumulativeTransferAmountToReinvestAddr", Value.fromBigInt(value));
  }

  get cumulativeReinvestGasCost(): BigInt {
    let value = this.get("cumulativeReinvestGasCost");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set cumulativeReinvestGasCost(value: BigInt) {
    this.set("cumulativeReinvestGasCost", Value.fromBigInt(value));
  }

  get deposits(): DepositLoader {
    return new DepositLoader(
      "Strategy",
      this.get("id")!.toBytes().toHexString(),
      "deposits",
    );
  }

  get withdraws(): WithdrawLoader {
    return new WithdrawLoader(
      "Strategy",
      this.get("id")!.toBytes().toHexString(),
      "withdraws",
    );
  }

  get transfers(): TransferLoader {
    return new TransferLoader(
      "Strategy",
      this.get("id")!.toBytes().toHexString(),
      "transfers",
    );
  }

  get reinvests(): ReinvestLoader {
    return new ReinvestLoader(
      "Strategy",
      this.get("id")!.toBytes().toHexString(),
      "reinvests",
    );
  }

  get users(): UserStrategyLoader {
    return new UserStrategyLoader(
      "Strategy",
      this.get("id")!.toBytes().toHexString(),
      "users",
    );
  }

  get allEvents(): DataLoader {
    return new DataLoader(
      "Strategy",
      this.get("id")!.toBytes().toHexString(),
      "allEvents",
    );
  }

  get stats(): StrategyStatLoader {
    return new StrategyStatLoader(
      "Strategy",
      this.get("id")!.toBytes().toHexString(),
      "stats",
    );
  }
}

export class Token extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Token entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Token must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Token", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Token | null {
    return changetype<Token | null>(
      store.get_in_block("Token", id.toHexString()),
    );
  }

  static load(id: Bytes): Token | null {
    return changetype<Token | null>(store.get("Token", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get symbol(): string {
    let value = this.get("symbol");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set symbol(value: string) {
    this.set("symbol", Value.fromString(value));
  }

  get decimals(): BigInt {
    let value = this.get("decimals");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set decimals(value: BigInt) {
    this.set("decimals", Value.fromBigInt(value));
  }
}

export class Deposit extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Deposit entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Deposit must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Deposit", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Deposit | null {
    return changetype<Deposit | null>(
      store.get_in_block("Deposit", id.toHexString()),
    );
  }

  static load(id: Bytes): Deposit | null {
    return changetype<Deposit | null>(store.get("Deposit", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get strategy(): Bytes {
    let value = this.get("strategy");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set strategy(value: Bytes) {
    this.set("strategy", Value.fromBytes(value));
  }

  get userStrategy(): Bytes {
    let value = this.get("userStrategy");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set userStrategy(value: Bytes) {
    this.set("userStrategy", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Reinvest extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Reinvest entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Reinvest must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Reinvest", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Reinvest | null {
    return changetype<Reinvest | null>(
      store.get_in_block("Reinvest", id.toHexString()),
    );
  }

  static load(id: Bytes): Reinvest | null {
    return changetype<Reinvest | null>(store.get("Reinvest", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get strategy(): Bytes {
    let value = this.get("strategy");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set strategy(value: Bytes) {
    this.set("strategy", Value.fromBytes(value));
  }

  get userStrategy(): Bytes {
    let value = this.get("userStrategy");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set userStrategy(value: Bytes) {
    this.set("userStrategy", Value.fromBytes(value));
  }

  get ratio(): BigDecimal {
    let value = this.get("ratio");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigDecimal();
    }
  }

  set ratio(value: BigDecimal) {
    this.set("ratio", Value.fromBigDecimal(value));
  }

  get reinvestCount(): BigInt {
    let value = this.get("reinvestCount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set reinvestCount(value: BigInt) {
    this.set("reinvestCount", Value.fromBigInt(value));
  }

  get newTotalDeposits(): BigInt {
    let value = this.get("newTotalDeposits");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set newTotalDeposits(value: BigInt) {
    this.set("newTotalDeposits", Value.fromBigInt(value));
  }

  get newTotalSupply(): BigInt {
    let value = this.get("newTotalSupply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set newTotalSupply(value: BigInt) {
    this.set("newTotalSupply", Value.fromBigInt(value));
  }

  get transferAmountToDevAddrOrFeeCollector(): BigInt {
    let value = this.get("transferAmountToDevAddrOrFeeCollector");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set transferAmountToDevAddrOrFeeCollector(value: BigInt) {
    this.set("transferAmountToDevAddrOrFeeCollector", Value.fromBigInt(value));
  }

  get transferAmountToReinvestAddr(): BigInt {
    let value = this.get("transferAmountToReinvestAddr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set transferAmountToReinvestAddr(value: BigInt) {
    this.set("transferAmountToReinvestAddr", Value.fromBigInt(value));
  }

  get gasPrice(): BigInt {
    let value = this.get("gasPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set gasPrice(value: BigInt) {
    this.set("gasPrice", Value.fromBigInt(value));
  }

  get gasUsed(): BigInt {
    let value = this.get("gasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set gasUsed(value: BigInt) {
    this.set("gasUsed", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Transfer extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Transfer entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Transfer must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Transfer", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Transfer | null {
    return changetype<Transfer | null>(
      store.get_in_block("Transfer", id.toHexString()),
    );
  }

  static load(id: Bytes): Transfer | null {
    return changetype<Transfer | null>(store.get("Transfer", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get strategy(): Bytes {
    let value = this.get("strategy");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set strategy(value: Bytes) {
    this.set("strategy", Value.fromBytes(value));
  }

  get fromUser(): Bytes | null {
    let value = this.get("fromUser");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set fromUser(value: Bytes | null) {
    if (!value) {
      this.unset("fromUser");
    } else {
      this.set("fromUser", Value.fromBytes(<Bytes>value));
    }
  }

  get toUser(): Bytes | null {
    let value = this.get("toUser");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set toUser(value: Bytes | null) {
    if (!value) {
      this.unset("toUser");
    } else {
      this.set("toUser", Value.fromBytes(<Bytes>value));
    }
  }

  get userStrategyFrom(): Bytes | null {
    let value = this.get("userStrategyFrom");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set userStrategyFrom(value: Bytes | null) {
    if (!value) {
      this.unset("userStrategyFrom");
    } else {
      this.set("userStrategyFrom", Value.fromBytes(<Bytes>value));
    }
  }

  get userStrategyTo(): Bytes | null {
    let value = this.get("userStrategyTo");
    if (!value || value.kind == ValueKind.NULL) {
      return null;
    } else {
      return value.toBytes();
    }
  }

  set userStrategyTo(value: Bytes | null) {
    if (!value) {
      this.unset("userStrategyTo");
    } else {
      this.set("userStrategyTo", Value.fromBytes(<Bytes>value));
    }
  }

  get value(): BigInt {
    let value = this.get("value");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set value(value: BigInt) {
    this.set("value", Value.fromBigInt(value));
  }

  get depositTokenValue(): BigInt {
    let value = this.get("depositTokenValue");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set depositTokenValue(value: BigInt) {
    this.set("depositTokenValue", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Withdraw extends Entity {
  constructor(id: Bytes) {
    super();
    this.set("id", Value.fromBytes(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Withdraw entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.BYTES,
        `Entities of type Withdraw must have an ID of type Bytes but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Withdraw", id.toBytes().toHexString(), this);
    }
  }

  static loadInBlock(id: Bytes): Withdraw | null {
    return changetype<Withdraw | null>(
      store.get_in_block("Withdraw", id.toHexString()),
    );
  }

  static load(id: Bytes): Withdraw | null {
    return changetype<Withdraw | null>(store.get("Withdraw", id.toHexString()));
  }

  get id(): Bytes {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set id(value: Bytes) {
    this.set("id", Value.fromBytes(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get strategy(): Bytes {
    let value = this.get("strategy");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set strategy(value: Bytes) {
    this.set("strategy", Value.fromBytes(value));
  }

  get userStrategy(): Bytes {
    let value = this.get("userStrategy");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set userStrategy(value: Bytes) {
    this.set("userStrategy", Value.fromBytes(value));
  }

  get amount(): BigInt {
    let value = this.get("amount");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set amount(value: BigInt) {
    this.set("amount", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }
}

export class Data extends Entity {
  constructor(id: string) {
    super();
    this.set("id", Value.fromString(id));
  }

  save(): void {
    let id = this.get("id");
    assert(id != null, "Cannot save Data entity without an ID");
    if (id) {
      assert(
        id.kind == ValueKind.STRING,
        `Entities of type Data must have an ID of type String but the id '${id.displayData()}' is of type ${id.displayKind()}`,
      );
      store.set("Data", id.toString(), this);
    }
  }

  static loadInBlock(id: string): Data | null {
    return changetype<Data | null>(store.get_in_block("Data", id));
  }

  static load(id: string): Data | null {
    return changetype<Data | null>(store.get("Data", id));
  }

  get id(): i64 {
    let value = this.get("id");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI64();
    }
  }

  set id(value: i64) {
    this.set("id", Value.fromI64(value));
  }

  get timestamp(): i64 {
    let value = this.get("timestamp");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toTimestamp();
    }
  }

  set timestamp(value: i64) {
    this.set("timestamp", Value.fromTimestamp(value));
  }

  get user(): Bytes {
    let value = this.get("user");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set user(value: Bytes) {
    this.set("user", Value.fromBytes(value));
  }

  get strategy(): Bytes {
    let value = this.get("strategy");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set strategy(value: Bytes) {
    this.set("strategy", Value.fromBytes(value));
  }

  get userStrategy(): Bytes {
    let value = this.get("userStrategy");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set userStrategy(value: Bytes) {
    this.set("userStrategy", Value.fromBytes(value));
  }

  get eventName(): string {
    let value = this.get("eventName");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toString();
    }
  }

  set eventName(value: string) {
    this.set("eventName", Value.fromString(value));
  }

  get eventNameId(): i64 {
    let value = this.get("eventNameId");
    if (!value || value.kind == ValueKind.NULL) {
      return 0;
    } else {
      return value.toI64();
    }
  }

  set eventNameId(value: i64) {
    this.set("eventNameId", Value.fromI64(value));
  }

  get depositTokenAmountFromUser(): BigInt {
    let value = this.get("depositTokenAmountFromUser");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set depositTokenAmountFromUser(value: BigInt) {
    this.set("depositTokenAmountFromUser", Value.fromBigInt(value));
  }

  get depositTokenAmountToUser(): BigInt {
    let value = this.get("depositTokenAmountToUser");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set depositTokenAmountToUser(value: BigInt) {
    this.set("depositTokenAmountToUser", Value.fromBigInt(value));
  }

  get yrtAmountFromUser(): BigInt {
    let value = this.get("yrtAmountFromUser");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set yrtAmountFromUser(value: BigInt) {
    this.set("yrtAmountFromUser", Value.fromBigInt(value));
  }

  get yrtAmountToUser(): BigInt {
    let value = this.get("yrtAmountToUser");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set yrtAmountToUser(value: BigInt) {
    this.set("yrtAmountToUser", Value.fromBigInt(value));
  }

  get newTotalDeposits(): BigInt {
    let value = this.get("newTotalDeposits");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set newTotalDeposits(value: BigInt) {
    this.set("newTotalDeposits", Value.fromBigInt(value));
  }

  get newTotalSupply(): BigInt {
    let value = this.get("newTotalSupply");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set newTotalSupply(value: BigInt) {
    this.set("newTotalSupply", Value.fromBigInt(value));
  }

  get transferAmountToDevAddrOrFeeCollector(): BigInt {
    let value = this.get("transferAmountToDevAddrOrFeeCollector");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set transferAmountToDevAddrOrFeeCollector(value: BigInt) {
    this.set("transferAmountToDevAddrOrFeeCollector", Value.fromBigInt(value));
  }

  get transferAmountToReinvestAddr(): BigInt {
    let value = this.get("transferAmountToReinvestAddr");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set transferAmountToReinvestAddr(value: BigInt) {
    this.set("transferAmountToReinvestAddr", Value.fromBigInt(value));
  }

  get reinvestGasPrice(): BigInt {
    let value = this.get("reinvestGasPrice");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set reinvestGasPrice(value: BigInt) {
    this.set("reinvestGasPrice", Value.fromBigInt(value));
  }

  get reinvestGasUsed(): BigInt {
    let value = this.get("reinvestGasUsed");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set reinvestGasUsed(value: BigInt) {
    this.set("reinvestGasUsed", Value.fromBigInt(value));
  }

  get blockNumber(): BigInt {
    let value = this.get("blockNumber");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockNumber(value: BigInt) {
    this.set("blockNumber", Value.fromBigInt(value));
  }

  get blockTimestamp(): BigInt {
    let value = this.get("blockTimestamp");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set blockTimestamp(value: BigInt) {
    this.set("blockTimestamp", Value.fromBigInt(value));
  }

  get transactionHash(): Bytes {
    let value = this.get("transactionHash");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBytes();
    }
  }

  set transactionHash(value: Bytes) {
    this.set("transactionHash", Value.fromBytes(value));
  }

  get logIndex(): BigInt {
    let value = this.get("logIndex");
    if (!value || value.kind == ValueKind.NULL) {
      throw new Error("Cannot return null for a required field.");
    } else {
      return value.toBigInt();
    }
  }

  set logIndex(value: BigInt) {
    this.set("logIndex", Value.fromBigInt(value));
  }
}

export class DepositLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Deposit[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Deposit[]>(value);
  }
}

export class WithdrawLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Withdraw[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Withdraw[]>(value);
  }
}

export class TransferLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Transfer[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Transfer[]>(value);
  }
}

export class ReinvestLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Reinvest[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Reinvest[]>(value);
  }
}

export class DataLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): Data[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<Data[]>(value);
  }
}

export class UserStrategyStatLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): UserStrategyStat[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<UserStrategyStat[]>(value);
  }
}

export class UserStrategyLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): UserStrategy[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<UserStrategy[]>(value);
  }
}

export class StrategyStatLoader extends Entity {
  _entity: string;
  _field: string;
  _id: string;

  constructor(entity: string, id: string, field: string) {
    super();
    this._entity = entity;
    this._id = id;
    this._field = field;
  }

  load(): StrategyStat[] {
    let value = store.loadRelated(this._entity, this._id, this._field);
    return changetype<StrategyStat[]>(value);
  }
}
