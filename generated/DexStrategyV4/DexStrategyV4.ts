// THIS IS AN AUTOGENERATED FILE. DO NOT EDIT THIS FILE DIRECTLY.

import {
  ethereum,
  JSONValue,
  TypedMap,
  Entity,
  Bytes,
  Address,
  BigInt,
} from "@graphprotocol/graph-ts";

export class AllowDepositor extends ethereum.Event {
  get params(): AllowDepositor__Params {
    return new AllowDepositor__Params(this);
  }
}

export class AllowDepositor__Params {
  _event: AllowDepositor;

  constructor(event: AllowDepositor) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Approval extends ethereum.Event {
  get params(): Approval__Params {
    return new Approval__Params(this);
  }
}

export class Approval__Params {
  _event: Approval;

  constructor(event: Approval) {
    this._event = event;
  }

  get owner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get spender(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class Deposit extends ethereum.Event {
  get params(): Deposit__Params {
    return new Deposit__Params(this);
  }
}

export class Deposit__Params {
  _event: Deposit;

  constructor(event: Deposit) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DepositsEnabled extends ethereum.Event {
  get params(): DepositsEnabled__Params {
    return new DepositsEnabled__Params(this);
  }
}

export class DepositsEnabled__Params {
  _event: DepositsEnabled;

  constructor(event: DepositsEnabled) {
    this._event = event;
  }

  get newValue(): boolean {
    return this._event.parameters[0].value.toBoolean();
  }
}

export class OwnershipTransferred extends ethereum.Event {
  get params(): OwnershipTransferred__Params {
    return new OwnershipTransferred__Params(this);
  }
}

export class OwnershipTransferred__Params {
  _event: OwnershipTransferred;

  constructor(event: OwnershipTransferred) {
    this._event = event;
  }

  get previousOwner(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newOwner(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class Recovered extends ethereum.Event {
  get params(): Recovered__Params {
    return new Recovered__Params(this);
  }
}

export class Recovered__Params {
  _event: Recovered;

  constructor(event: Recovered) {
    this._event = event;
  }

  get token(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Reinvest extends ethereum.Event {
  get params(): Reinvest__Params {
    return new Reinvest__Params(this);
  }
}

export class Reinvest__Params {
  _event: Reinvest;

  constructor(event: Reinvest) {
    this._event = event;
  }

  get newTotalDeposits(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newTotalSupply(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class RemoveDepositor extends ethereum.Event {
  get params(): RemoveDepositor__Params {
    return new RemoveDepositor__Params(this);
  }
}

export class RemoveDepositor__Params {
  _event: RemoveDepositor;

  constructor(event: RemoveDepositor) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }
}

export class Transfer extends ethereum.Event {
  get params(): Transfer__Params {
    return new Transfer__Params(this);
  }
}

export class Transfer__Params {
  _event: Transfer;

  constructor(event: Transfer) {
    this._event = event;
  }

  get from(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get to(): Address {
    return this._event.parameters[1].value.toAddress();
  }

  get value(): BigInt {
    return this._event.parameters[2].value.toBigInt();
  }
}

export class UpdateAdminFee extends ethereum.Event {
  get params(): UpdateAdminFee__Params {
    return new UpdateAdminFee__Params(this);
  }
}

export class UpdateAdminFee__Params {
  _event: UpdateAdminFee;

  constructor(event: UpdateAdminFee) {
    this._event = event;
  }

  get oldValue(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newValue(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpdateDevAddr extends ethereum.Event {
  get params(): UpdateDevAddr__Params {
    return new UpdateDevAddr__Params(this);
  }
}

export class UpdateDevAddr__Params {
  _event: UpdateDevAddr;

  constructor(event: UpdateDevAddr) {
    this._event = event;
  }

  get oldValue(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get newValue(): Address {
    return this._event.parameters[1].value.toAddress();
  }
}

export class UpdateDevFee extends ethereum.Event {
  get params(): UpdateDevFee__Params {
    return new UpdateDevFee__Params(this);
  }
}

export class UpdateDevFee__Params {
  _event: UpdateDevFee;

  constructor(event: UpdateDevFee) {
    this._event = event;
  }

  get oldValue(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newValue(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpdateMaxTokensToDepositWithoutReinvest extends ethereum.Event {
  get params(): UpdateMaxTokensToDepositWithoutReinvest__Params {
    return new UpdateMaxTokensToDepositWithoutReinvest__Params(this);
  }
}

export class UpdateMaxTokensToDepositWithoutReinvest__Params {
  _event: UpdateMaxTokensToDepositWithoutReinvest;

  constructor(event: UpdateMaxTokensToDepositWithoutReinvest) {
    this._event = event;
  }

  get oldValue(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newValue(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpdateMinTokensToReinvest extends ethereum.Event {
  get params(): UpdateMinTokensToReinvest__Params {
    return new UpdateMinTokensToReinvest__Params(this);
  }
}

export class UpdateMinTokensToReinvest__Params {
  _event: UpdateMinTokensToReinvest;

  constructor(event: UpdateMinTokensToReinvest) {
    this._event = event;
  }

  get oldValue(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newValue(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class UpdateReinvestReward extends ethereum.Event {
  get params(): UpdateReinvestReward__Params {
    return new UpdateReinvestReward__Params(this);
  }
}

export class UpdateReinvestReward__Params {
  _event: UpdateReinvestReward;

  constructor(event: UpdateReinvestReward) {
    this._event = event;
  }

  get oldValue(): BigInt {
    return this._event.parameters[0].value.toBigInt();
  }

  get newValue(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class Withdraw extends ethereum.Event {
  get params(): Withdraw__Params {
    return new Withdraw__Params(this);
  }
}

export class Withdraw__Params {
  _event: Withdraw;

  constructor(event: Withdraw) {
    this._event = event;
  }

  get account(): Address {
    return this._event.parameters[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._event.parameters[1].value.toBigInt();
  }
}

export class DexStrategyV4 extends ethereum.SmartContract {
  static bind(address: Address): DexStrategyV4 {
    return new DexStrategyV4("DexStrategyV4", address);
  }

  ADMIN_FEE_BIPS(): BigInt {
    let result = super.call("ADMIN_FEE_BIPS", "ADMIN_FEE_BIPS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_ADMIN_FEE_BIPS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "ADMIN_FEE_BIPS",
      "ADMIN_FEE_BIPS():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  DEPOSITS_ENABLED(): boolean {
    let result = super.call(
      "DEPOSITS_ENABLED",
      "DEPOSITS_ENABLED():(bool)",
      [],
    );

    return result[0].toBoolean();
  }

  try_DEPOSITS_ENABLED(): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "DEPOSITS_ENABLED",
      "DEPOSITS_ENABLED():(bool)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  DEV_FEE_BIPS(): BigInt {
    let result = super.call("DEV_FEE_BIPS", "DEV_FEE_BIPS():(uint256)", []);

    return result[0].toBigInt();
  }

  try_DEV_FEE_BIPS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("DEV_FEE_BIPS", "DEV_FEE_BIPS():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  DOMAIN_TYPEHASH(): Bytes {
    let result = super.call(
      "DOMAIN_TYPEHASH",
      "DOMAIN_TYPEHASH():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_DOMAIN_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "DOMAIN_TYPEHASH",
      "DOMAIN_TYPEHASH():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST(): BigInt {
    let result = super.call(
      "MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST",
      "MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST",
      "MAX_TOKENS_TO_DEPOSIT_WITHOUT_REINVEST():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  MIN_TOKENS_TO_REINVEST(): BigInt {
    let result = super.call(
      "MIN_TOKENS_TO_REINVEST",
      "MIN_TOKENS_TO_REINVEST():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_MIN_TOKENS_TO_REINVEST(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "MIN_TOKENS_TO_REINVEST",
      "MIN_TOKENS_TO_REINVEST():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  PERMIT_TYPEHASH(): Bytes {
    let result = super.call(
      "PERMIT_TYPEHASH",
      "PERMIT_TYPEHASH():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_PERMIT_TYPEHASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "PERMIT_TYPEHASH",
      "PERMIT_TYPEHASH():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  REINVEST_REWARD_BIPS(): BigInt {
    let result = super.call(
      "REINVEST_REWARD_BIPS",
      "REINVEST_REWARD_BIPS():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_REINVEST_REWARD_BIPS(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "REINVEST_REWARD_BIPS",
      "REINVEST_REWARD_BIPS():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  VERSION_HASH(): Bytes {
    let result = super.call("VERSION_HASH", "VERSION_HASH():(bytes32)", []);

    return result[0].toBytes();
  }

  try_VERSION_HASH(): ethereum.CallResult<Bytes> {
    let result = super.tryCall("VERSION_HASH", "VERSION_HASH():(bytes32)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  allowance(account: Address, spender: Address): BigInt {
    let result = super.call(
      "allowance",
      "allowance(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(spender),
      ],
    );

    return result[0].toBigInt();
  }

  try_allowance(
    account: Address,
    spender: Address,
  ): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "allowance",
      "allowance(address,address):(uint256)",
      [
        ethereum.Value.fromAddress(account),
        ethereum.Value.fromAddress(spender),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  allowedDepositors(param0: Address): boolean {
    let result = super.call(
      "allowedDepositors",
      "allowedDepositors(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );

    return result[0].toBoolean();
  }

  try_allowedDepositors(param0: Address): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "allowedDepositors",
      "allowedDepositors(address):(bool)",
      [ethereum.Value.fromAddress(param0)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  approve(spender: Address, amount: BigInt): boolean {
    let result = super.call("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);

    return result[0].toBoolean();
  }

  try_approve(spender: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("approve", "approve(address,uint256):(bool)", [
      ethereum.Value.fromAddress(spender),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  balanceOf(account: Address): BigInt {
    let result = super.call("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);

    return result[0].toBigInt();
  }

  try_balanceOf(account: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("balanceOf", "balanceOf(address):(uint256)", [
      ethereum.Value.fromAddress(account),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  checkReward(): BigInt {
    let result = super.call("checkReward", "checkReward():(uint256)", []);

    return result[0].toBigInt();
  }

  try_checkReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("checkReward", "checkReward():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  decimals(): i32 {
    let result = super.call("decimals", "decimals():(uint8)", []);

    return result[0].toI32();
  }

  try_decimals(): ethereum.CallResult<i32> {
    let result = super.tryCall("decimals", "decimals():(uint8)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toI32());
  }

  depositToken(): Address {
    let result = super.call("depositToken", "depositToken():(address)", []);

    return result[0].toAddress();
  }

  try_depositToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("depositToken", "depositToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  devAddr(): Address {
    let result = super.call("devAddr", "devAddr():(address)", []);

    return result[0].toAddress();
  }

  try_devAddr(): ethereum.CallResult<Address> {
    let result = super.tryCall("devAddr", "devAddr():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  estimateDeployedBalance(): BigInt {
    let result = super.call(
      "estimateDeployedBalance",
      "estimateDeployedBalance():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_estimateDeployedBalance(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "estimateDeployedBalance",
      "estimateDeployedBalance():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  estimateReinvestReward(): BigInt {
    let result = super.call(
      "estimateReinvestReward",
      "estimateReinvestReward():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_estimateReinvestReward(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "estimateReinvestReward",
      "estimateReinvestReward():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDepositTokensForShares(amount: BigInt): BigInt {
    let result = super.call(
      "getDepositTokensForShares",
      "getDepositTokensForShares(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)],
    );

    return result[0].toBigInt();
  }

  try_getDepositTokensForShares(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getDepositTokensForShares",
      "getDepositTokensForShares(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  getDomainSeparator(): Bytes {
    let result = super.call(
      "getDomainSeparator",
      "getDomainSeparator():(bytes32)",
      [],
    );

    return result[0].toBytes();
  }

  try_getDomainSeparator(): ethereum.CallResult<Bytes> {
    let result = super.tryCall(
      "getDomainSeparator",
      "getDomainSeparator():(bytes32)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBytes());
  }

  getSharesForDepositTokens(amount: BigInt): BigInt {
    let result = super.call(
      "getSharesForDepositTokens",
      "getSharesForDepositTokens(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)],
    );

    return result[0].toBigInt();
  }

  try_getSharesForDepositTokens(amount: BigInt): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "getSharesForDepositTokens",
      "getSharesForDepositTokens(uint256):(uint256)",
      [ethereum.Value.fromUnsignedBigInt(amount)],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  name(): string {
    let result = super.call("name", "name():(string)", []);

    return result[0].toString();
  }

  try_name(): ethereum.CallResult<string> {
    let result = super.tryCall("name", "name():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  nonces(param0: Address): BigInt {
    let result = super.call("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);

    return result[0].toBigInt();
  }

  try_nonces(param0: Address): ethereum.CallResult<BigInt> {
    let result = super.tryCall("nonces", "nonces(address):(uint256)", [
      ethereum.Value.fromAddress(param0),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  numberOfAllowedDepositors(): BigInt {
    let result = super.call(
      "numberOfAllowedDepositors",
      "numberOfAllowedDepositors():(uint256)",
      [],
    );

    return result[0].toBigInt();
  }

  try_numberOfAllowedDepositors(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "numberOfAllowedDepositors",
      "numberOfAllowedDepositors():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  owner(): Address {
    let result = super.call("owner", "owner():(address)", []);

    return result[0].toAddress();
  }

  try_owner(): ethereum.CallResult<Address> {
    let result = super.tryCall("owner", "owner():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  rewardToken(): Address {
    let result = super.call("rewardToken", "rewardToken():(address)", []);

    return result[0].toAddress();
  }

  try_rewardToken(): ethereum.CallResult<Address> {
    let result = super.tryCall("rewardToken", "rewardToken():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  router(): Address {
    let result = super.call("router", "router():(address)", []);

    return result[0].toAddress();
  }

  try_router(): ethereum.CallResult<Address> {
    let result = super.tryCall("router", "router():(address)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  stakingContract(): Address {
    let result = super.call(
      "stakingContract",
      "stakingContract():(address)",
      [],
    );

    return result[0].toAddress();
  }

  try_stakingContract(): ethereum.CallResult<Address> {
    let result = super.tryCall(
      "stakingContract",
      "stakingContract():(address)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toAddress());
  }

  symbol(): string {
    let result = super.call("symbol", "symbol():(string)", []);

    return result[0].toString();
  }

  try_symbol(): ethereum.CallResult<string> {
    let result = super.tryCall("symbol", "symbol():(string)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toString());
  }

  totalDeposits(): BigInt {
    let result = super.call("totalDeposits", "totalDeposits():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalDeposits(): ethereum.CallResult<BigInt> {
    let result = super.tryCall(
      "totalDeposits",
      "totalDeposits():(uint256)",
      [],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  totalSupply(): BigInt {
    let result = super.call("totalSupply", "totalSupply():(uint256)", []);

    return result[0].toBigInt();
  }

  try_totalSupply(): ethereum.CallResult<BigInt> {
    let result = super.tryCall("totalSupply", "totalSupply():(uint256)", []);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBigInt());
  }

  transfer(dst: Address, amount: BigInt): boolean {
    let result = super.call("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(dst),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);

    return result[0].toBoolean();
  }

  try_transfer(dst: Address, amount: BigInt): ethereum.CallResult<boolean> {
    let result = super.tryCall("transfer", "transfer(address,uint256):(bool)", [
      ethereum.Value.fromAddress(dst),
      ethereum.Value.fromUnsignedBigInt(amount),
    ]);
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }

  transferFrom(src: Address, dst: Address, amount: BigInt): boolean {
    let result = super.call(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(src),
        ethereum.Value.fromAddress(dst),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );

    return result[0].toBoolean();
  }

  try_transferFrom(
    src: Address,
    dst: Address,
    amount: BigInt,
  ): ethereum.CallResult<boolean> {
    let result = super.tryCall(
      "transferFrom",
      "transferFrom(address,address,uint256):(bool)",
      [
        ethereum.Value.fromAddress(src),
        ethereum.Value.fromAddress(dst),
        ethereum.Value.fromUnsignedBigInt(amount),
      ],
    );
    if (result.reverted) {
      return new ethereum.CallResult();
    }
    let value = result.value;
    return ethereum.CallResult.fromValue(value[0].toBoolean());
  }
}

export class ConstructorCall extends ethereum.Call {
  get inputs(): ConstructorCall__Inputs {
    return new ConstructorCall__Inputs(this);
  }

  get outputs(): ConstructorCall__Outputs {
    return new ConstructorCall__Outputs(this);
  }
}

export class ConstructorCall__Inputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }

  get _name(): string {
    return this._call.inputValues[0].value.toString();
  }

  get _depositToken(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get _rewardToken(): Address {
    return this._call.inputValues[2].value.toAddress();
  }

  get _stakingContract(): Address {
    return this._call.inputValues[3].value.toAddress();
  }

  get _router(): Address {
    return this._call.inputValues[4].value.toAddress();
  }

  get _timelock(): Address {
    return this._call.inputValues[5].value.toAddress();
  }

  get _minTokensToReinvest(): BigInt {
    return this._call.inputValues[6].value.toBigInt();
  }

  get _adminFeeBips(): BigInt {
    return this._call.inputValues[7].value.toBigInt();
  }

  get _devFeeBips(): BigInt {
    return this._call.inputValues[8].value.toBigInt();
  }

  get _reinvestRewardBips(): BigInt {
    return this._call.inputValues[9].value.toBigInt();
  }
}

export class ConstructorCall__Outputs {
  _call: ConstructorCall;

  constructor(call: ConstructorCall) {
    this._call = call;
  }
}

export class AllowDepositorCall extends ethereum.Call {
  get inputs(): AllowDepositorCall__Inputs {
    return new AllowDepositorCall__Inputs(this);
  }

  get outputs(): AllowDepositorCall__Outputs {
    return new AllowDepositorCall__Outputs(this);
  }
}

export class AllowDepositorCall__Inputs {
  _call: AllowDepositorCall;

  constructor(call: AllowDepositorCall) {
    this._call = call;
  }

  get depositor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class AllowDepositorCall__Outputs {
  _call: AllowDepositorCall;

  constructor(call: AllowDepositorCall) {
    this._call = call;
  }
}

export class ApproveCall extends ethereum.Call {
  get inputs(): ApproveCall__Inputs {
    return new ApproveCall__Inputs(this);
  }

  get outputs(): ApproveCall__Outputs {
    return new ApproveCall__Outputs(this);
  }
}

export class ApproveCall__Inputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get spender(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class ApproveCall__Outputs {
  _call: ApproveCall;

  constructor(call: ApproveCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class DepositCall extends ethereum.Call {
  get inputs(): DepositCall__Inputs {
    return new DepositCall__Inputs(this);
  }

  get outputs(): DepositCall__Outputs {
    return new DepositCall__Outputs(this);
  }
}

export class DepositCall__Inputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class DepositCall__Outputs {
  _call: DepositCall;

  constructor(call: DepositCall) {
    this._call = call;
  }
}

export class DepositForCall extends ethereum.Call {
  get inputs(): DepositForCall__Inputs {
    return new DepositForCall__Inputs(this);
  }

  get outputs(): DepositForCall__Outputs {
    return new DepositForCall__Outputs(this);
  }
}

export class DepositForCall__Inputs {
  _call: DepositForCall;

  constructor(call: DepositForCall) {
    this._call = call;
  }

  get account(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class DepositForCall__Outputs {
  _call: DepositForCall;

  constructor(call: DepositForCall) {
    this._call = call;
  }
}

export class DepositWithPermitCall extends ethereum.Call {
  get inputs(): DepositWithPermitCall__Inputs {
    return new DepositWithPermitCall__Inputs(this);
  }

  get outputs(): DepositWithPermitCall__Outputs {
    return new DepositWithPermitCall__Outputs(this);
  }
}

export class DepositWithPermitCall__Inputs {
  _call: DepositWithPermitCall;

  constructor(call: DepositWithPermitCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[2].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[3].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[4].value.toBytes();
  }
}

export class DepositWithPermitCall__Outputs {
  _call: DepositWithPermitCall;

  constructor(call: DepositWithPermitCall) {
    this._call = call;
  }
}

export class PermitCall extends ethereum.Call {
  get inputs(): PermitCall__Inputs {
    return new PermitCall__Inputs(this);
  }

  get outputs(): PermitCall__Outputs {
    return new PermitCall__Outputs(this);
  }
}

export class PermitCall__Inputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }

  get owner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get value(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }

  get deadline(): BigInt {
    return this._call.inputValues[3].value.toBigInt();
  }

  get v(): i32 {
    return this._call.inputValues[4].value.toI32();
  }

  get r(): Bytes {
    return this._call.inputValues[5].value.toBytes();
  }

  get s(): Bytes {
    return this._call.inputValues[6].value.toBytes();
  }
}

export class PermitCall__Outputs {
  _call: PermitCall;

  constructor(call: PermitCall) {
    this._call = call;
  }
}

export class RecoverAVAXCall extends ethereum.Call {
  get inputs(): RecoverAVAXCall__Inputs {
    return new RecoverAVAXCall__Inputs(this);
  }

  get outputs(): RecoverAVAXCall__Outputs {
    return new RecoverAVAXCall__Outputs(this);
  }
}

export class RecoverAVAXCall__Inputs {
  _call: RecoverAVAXCall;

  constructor(call: RecoverAVAXCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class RecoverAVAXCall__Outputs {
  _call: RecoverAVAXCall;

  constructor(call: RecoverAVAXCall) {
    this._call = call;
  }
}

export class RecoverERC20Call extends ethereum.Call {
  get inputs(): RecoverERC20Call__Inputs {
    return new RecoverERC20Call__Inputs(this);
  }

  get outputs(): RecoverERC20Call__Outputs {
    return new RecoverERC20Call__Outputs(this);
  }
}

export class RecoverERC20Call__Inputs {
  _call: RecoverERC20Call;

  constructor(call: RecoverERC20Call) {
    this._call = call;
  }

  get tokenAddress(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get tokenAmount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class RecoverERC20Call__Outputs {
  _call: RecoverERC20Call;

  constructor(call: RecoverERC20Call) {
    this._call = call;
  }
}

export class ReinvestCall extends ethereum.Call {
  get inputs(): ReinvestCall__Inputs {
    return new ReinvestCall__Inputs(this);
  }

  get outputs(): ReinvestCall__Outputs {
    return new ReinvestCall__Outputs(this);
  }
}

export class ReinvestCall__Inputs {
  _call: ReinvestCall;

  constructor(call: ReinvestCall) {
    this._call = call;
  }
}

export class ReinvestCall__Outputs {
  _call: ReinvestCall;

  constructor(call: ReinvestCall) {
    this._call = call;
  }
}

export class RemoveDepositorCall extends ethereum.Call {
  get inputs(): RemoveDepositorCall__Inputs {
    return new RemoveDepositorCall__Inputs(this);
  }

  get outputs(): RemoveDepositorCall__Outputs {
    return new RemoveDepositorCall__Outputs(this);
  }
}

export class RemoveDepositorCall__Inputs {
  _call: RemoveDepositorCall;

  constructor(call: RemoveDepositorCall) {
    this._call = call;
  }

  get depositor(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class RemoveDepositorCall__Outputs {
  _call: RemoveDepositorCall;

  constructor(call: RemoveDepositorCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall extends ethereum.Call {
  get inputs(): RenounceOwnershipCall__Inputs {
    return new RenounceOwnershipCall__Inputs(this);
  }

  get outputs(): RenounceOwnershipCall__Outputs {
    return new RenounceOwnershipCall__Outputs(this);
  }
}

export class RenounceOwnershipCall__Inputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RenounceOwnershipCall__Outputs {
  _call: RenounceOwnershipCall;

  constructor(call: RenounceOwnershipCall) {
    this._call = call;
  }
}

export class RescueDeployedFundsCall extends ethereum.Call {
  get inputs(): RescueDeployedFundsCall__Inputs {
    return new RescueDeployedFundsCall__Inputs(this);
  }

  get outputs(): RescueDeployedFundsCall__Outputs {
    return new RescueDeployedFundsCall__Outputs(this);
  }
}

export class RescueDeployedFundsCall__Inputs {
  _call: RescueDeployedFundsCall;

  constructor(call: RescueDeployedFundsCall) {
    this._call = call;
  }

  get minReturnAmountAccepted(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }

  get disableDeposits(): boolean {
    return this._call.inputValues[1].value.toBoolean();
  }
}

export class RescueDeployedFundsCall__Outputs {
  _call: RescueDeployedFundsCall;

  constructor(call: RescueDeployedFundsCall) {
    this._call = call;
  }
}

export class RevokeAllowanceCall extends ethereum.Call {
  get inputs(): RevokeAllowanceCall__Inputs {
    return new RevokeAllowanceCall__Inputs(this);
  }

  get outputs(): RevokeAllowanceCall__Outputs {
    return new RevokeAllowanceCall__Outputs(this);
  }
}

export class RevokeAllowanceCall__Inputs {
  _call: RevokeAllowanceCall;

  constructor(call: RevokeAllowanceCall) {
    this._call = call;
  }

  get token(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get spender(): Address {
    return this._call.inputValues[1].value.toAddress();
  }
}

export class RevokeAllowanceCall__Outputs {
  _call: RevokeAllowanceCall;

  constructor(call: RevokeAllowanceCall) {
    this._call = call;
  }
}

export class SetAllowancesCall extends ethereum.Call {
  get inputs(): SetAllowancesCall__Inputs {
    return new SetAllowancesCall__Inputs(this);
  }

  get outputs(): SetAllowancesCall__Outputs {
    return new SetAllowancesCall__Outputs(this);
  }
}

export class SetAllowancesCall__Inputs {
  _call: SetAllowancesCall;

  constructor(call: SetAllowancesCall) {
    this._call = call;
  }
}

export class SetAllowancesCall__Outputs {
  _call: SetAllowancesCall;

  constructor(call: SetAllowancesCall) {
    this._call = call;
  }
}

export class TransferCall extends ethereum.Call {
  get inputs(): TransferCall__Inputs {
    return new TransferCall__Inputs(this);
  }

  get outputs(): TransferCall__Outputs {
    return new TransferCall__Outputs(this);
  }
}

export class TransferCall__Inputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get dst(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[1].value.toBigInt();
  }
}

export class TransferCall__Outputs {
  _call: TransferCall;

  constructor(call: TransferCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferFromCall extends ethereum.Call {
  get inputs(): TransferFromCall__Inputs {
    return new TransferFromCall__Inputs(this);
  }

  get outputs(): TransferFromCall__Outputs {
    return new TransferFromCall__Outputs(this);
  }
}

export class TransferFromCall__Inputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get src(): Address {
    return this._call.inputValues[0].value.toAddress();
  }

  get dst(): Address {
    return this._call.inputValues[1].value.toAddress();
  }

  get amount(): BigInt {
    return this._call.inputValues[2].value.toBigInt();
  }
}

export class TransferFromCall__Outputs {
  _call: TransferFromCall;

  constructor(call: TransferFromCall) {
    this._call = call;
  }

  get value0(): boolean {
    return this._call.outputValues[0].value.toBoolean();
  }
}

export class TransferOwnershipCall extends ethereum.Call {
  get inputs(): TransferOwnershipCall__Inputs {
    return new TransferOwnershipCall__Inputs(this);
  }

  get outputs(): TransferOwnershipCall__Outputs {
    return new TransferOwnershipCall__Outputs(this);
  }
}

export class TransferOwnershipCall__Inputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }

  get newOwner(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class TransferOwnershipCall__Outputs {
  _call: TransferOwnershipCall;

  constructor(call: TransferOwnershipCall) {
    this._call = call;
  }
}

export class UpdateAdminFeeCall extends ethereum.Call {
  get inputs(): UpdateAdminFeeCall__Inputs {
    return new UpdateAdminFeeCall__Inputs(this);
  }

  get outputs(): UpdateAdminFeeCall__Outputs {
    return new UpdateAdminFeeCall__Outputs(this);
  }
}

export class UpdateAdminFeeCall__Inputs {
  _call: UpdateAdminFeeCall;

  constructor(call: UpdateAdminFeeCall) {
    this._call = call;
  }

  get newValue(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateAdminFeeCall__Outputs {
  _call: UpdateAdminFeeCall;

  constructor(call: UpdateAdminFeeCall) {
    this._call = call;
  }
}

export class UpdateDepositsEnabledCall extends ethereum.Call {
  get inputs(): UpdateDepositsEnabledCall__Inputs {
    return new UpdateDepositsEnabledCall__Inputs(this);
  }

  get outputs(): UpdateDepositsEnabledCall__Outputs {
    return new UpdateDepositsEnabledCall__Outputs(this);
  }
}

export class UpdateDepositsEnabledCall__Inputs {
  _call: UpdateDepositsEnabledCall;

  constructor(call: UpdateDepositsEnabledCall) {
    this._call = call;
  }

  get newValue(): boolean {
    return this._call.inputValues[0].value.toBoolean();
  }
}

export class UpdateDepositsEnabledCall__Outputs {
  _call: UpdateDepositsEnabledCall;

  constructor(call: UpdateDepositsEnabledCall) {
    this._call = call;
  }
}

export class UpdateDevAddrCall extends ethereum.Call {
  get inputs(): UpdateDevAddrCall__Inputs {
    return new UpdateDevAddrCall__Inputs(this);
  }

  get outputs(): UpdateDevAddrCall__Outputs {
    return new UpdateDevAddrCall__Outputs(this);
  }
}

export class UpdateDevAddrCall__Inputs {
  _call: UpdateDevAddrCall;

  constructor(call: UpdateDevAddrCall) {
    this._call = call;
  }

  get newValue(): Address {
    return this._call.inputValues[0].value.toAddress();
  }
}

export class UpdateDevAddrCall__Outputs {
  _call: UpdateDevAddrCall;

  constructor(call: UpdateDevAddrCall) {
    this._call = call;
  }
}

export class UpdateDevFeeCall extends ethereum.Call {
  get inputs(): UpdateDevFeeCall__Inputs {
    return new UpdateDevFeeCall__Inputs(this);
  }

  get outputs(): UpdateDevFeeCall__Outputs {
    return new UpdateDevFeeCall__Outputs(this);
  }
}

export class UpdateDevFeeCall__Inputs {
  _call: UpdateDevFeeCall;

  constructor(call: UpdateDevFeeCall) {
    this._call = call;
  }

  get newValue(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateDevFeeCall__Outputs {
  _call: UpdateDevFeeCall;

  constructor(call: UpdateDevFeeCall) {
    this._call = call;
  }
}

export class UpdateMaxTokensToDepositWithoutReinvestCall extends ethereum.Call {
  get inputs(): UpdateMaxTokensToDepositWithoutReinvestCall__Inputs {
    return new UpdateMaxTokensToDepositWithoutReinvestCall__Inputs(this);
  }

  get outputs(): UpdateMaxTokensToDepositWithoutReinvestCall__Outputs {
    return new UpdateMaxTokensToDepositWithoutReinvestCall__Outputs(this);
  }
}

export class UpdateMaxTokensToDepositWithoutReinvestCall__Inputs {
  _call: UpdateMaxTokensToDepositWithoutReinvestCall;

  constructor(call: UpdateMaxTokensToDepositWithoutReinvestCall) {
    this._call = call;
  }

  get newValue(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateMaxTokensToDepositWithoutReinvestCall__Outputs {
  _call: UpdateMaxTokensToDepositWithoutReinvestCall;

  constructor(call: UpdateMaxTokensToDepositWithoutReinvestCall) {
    this._call = call;
  }
}

export class UpdateMinTokensToReinvestCall extends ethereum.Call {
  get inputs(): UpdateMinTokensToReinvestCall__Inputs {
    return new UpdateMinTokensToReinvestCall__Inputs(this);
  }

  get outputs(): UpdateMinTokensToReinvestCall__Outputs {
    return new UpdateMinTokensToReinvestCall__Outputs(this);
  }
}

export class UpdateMinTokensToReinvestCall__Inputs {
  _call: UpdateMinTokensToReinvestCall;

  constructor(call: UpdateMinTokensToReinvestCall) {
    this._call = call;
  }

  get newValue(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateMinTokensToReinvestCall__Outputs {
  _call: UpdateMinTokensToReinvestCall;

  constructor(call: UpdateMinTokensToReinvestCall) {
    this._call = call;
  }
}

export class UpdateReinvestRewardCall extends ethereum.Call {
  get inputs(): UpdateReinvestRewardCall__Inputs {
    return new UpdateReinvestRewardCall__Inputs(this);
  }

  get outputs(): UpdateReinvestRewardCall__Outputs {
    return new UpdateReinvestRewardCall__Outputs(this);
  }
}

export class UpdateReinvestRewardCall__Inputs {
  _call: UpdateReinvestRewardCall;

  constructor(call: UpdateReinvestRewardCall) {
    this._call = call;
  }

  get newValue(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class UpdateReinvestRewardCall__Outputs {
  _call: UpdateReinvestRewardCall;

  constructor(call: UpdateReinvestRewardCall) {
    this._call = call;
  }
}

export class WithdrawCall extends ethereum.Call {
  get inputs(): WithdrawCall__Inputs {
    return new WithdrawCall__Inputs(this);
  }

  get outputs(): WithdrawCall__Outputs {
    return new WithdrawCall__Outputs(this);
  }
}

export class WithdrawCall__Inputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }

  get amount(): BigInt {
    return this._call.inputValues[0].value.toBigInt();
  }
}

export class WithdrawCall__Outputs {
  _call: WithdrawCall;

  constructor(call: WithdrawCall) {
    this._call = call;
  }
}
